class Solution:
    def f(self, x, y, m, n, obstacleGrid):
        k = (x, y)
        if k in self.d:
            return self.d[k]
        if x >= m or y >= n:
            return 0
        if obstacleGrid[y][x]:
            return 0
        if x == (m - 1) and y == (n - 1):
            return 1
        
        a = self.f(x + 1, y, m, n, obstacleGrid)
        b = self.f(x, y + 1, m, n, obstacleGrid)
        self.d[k] = a + b
        return a + b

    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        self.d  = {}
        n = len(obstacleGrid)
        m = len(obstacleGrid[0])
        return self.f(0, 0, m, n, obstacleGrid)